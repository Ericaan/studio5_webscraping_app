# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'selectReport.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import random

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import all_projects_ui
import pandas as pd
import numpy as np

class Ui_SelectReport(object):
    def generate_report(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = all_projects_ui.Ui_Project_Main()
        self.ui.setupUi(self.window)
        self.window.show()
        self.ui.stackedWidget.setCurrentIndex(3)
        report_name = self.report_name_text.text()
        file_name = self.file_name_lbl.text()
        # diag_title = file_name[file_name.rfind("/"):]
        df = pd.read_csv(file_name)
        # for dtype in df.dtypes.iteritems():
        #     print(dtype)
        objects = df.select_dtypes('O')
        col_object = objects.columns.tolist()
        nums = df.select_dtypes(include=['int64', 'float64'])
        col_num = nums.columns.tolist()
        self.ui.dv_report_name_lbl.setText(report_name)
        self.ui.figure.clear()
        position = 221

        def object_dv_csv():
            print("object_dv_csv")
            self.ui.dv_table.setHidden(False)
            objs = []
            name = []
            count = []
            for obj in objects.columns:
                # getting the number of how many words for each column have been repeated
                frequency = objects.pivot_table(columns=[obj], aggfunc='size')
                # getting the name
                most_called_name = frequency.idxmax()
                # the maximum number
                count_most_called_name = frequency.max()
                # append the name of columns, the most called name, and the number
                objs.append(obj)
                name.append(most_called_name)
                count.append(count_most_called_name)
            # make a dictionary
            data = {'Section': objs,
                    'Name': name,
                    'Frequency': count}
            # setting row and column for the table
            row = len(objects.columns)
            col = len(data.keys())
            self.ui.dv_table.setRowCount(row)
            self.ui.dv_table.setColumnCount(col)
            headers = []
            for i, key in enumerate(data.keys()):
                headers.append(key)
                for j, item in enumerate(data[key]):
                    newItem = QtWidgets.QTableWidgetItem(str(item))
                    self.ui.dv_table.setItem(j, i, newItem)
            self.ui.dv_table.setHorizontalHeaderLabels(headers)
            # resize the contents of the table
            self.ui.dv_table.resizeColumnsToContents()
            self.ui.dv_table.resizeRowsToContents()

        def number_dv_csv(position):
            # if file has unnamed (list of numbers)
            for i in nums:
                if i == "Unnamed: 0":
                    nums.drop("Unnamed: 0", inplace=True, axis=1)
                    col_num = nums.columns.tolist()
            # showing histogram -- only need one value(x)
            for i in nums.columns:
                ax = self.ui.figure.add_subplot(position)
                # plot data
                ax.hist(df[i])
                ax.set_xlabel(i)
                ax.set_ylabel('Frequency')
                position += 1
            # showing scatter plot -- need x and y (2 vals)
            ax = self.ui.figure.add_subplot(position)
            x = np.array(df[col_num[0]])
            y = np.array(df[col_num[1]])
            # plot data
            ax.scatter(x, y)
            ax.set_xlabel(col_num[0])
            ax.set_ylabel(col_num[1])
            position += 1

        #if csv file does not contain any "O", "int64", or "float64"
        if not col_num and not col_object:
            print("Object, Int, and float are null")
        else:
            if col_num != [] and col_object != []:
                print("both are not null")
                object_dv_csv()
                number_dv_csv(position)

            elif col_num != [] and not col_object:
                print("num is not null")
                # if file has unnamed (list of numbers)
                for i in nums:
                    if i == "Unnamed: 0":
                        nums.drop("Unnamed: 0", inplace=True, axis=1)
                        col_num = nums.columns.tolist()

                # showing histogram -- only need one value(x)
                for i in nums.columns:
                    ax = self.ui.figure.add_subplot(position)
                    # plot data
                    ax.hist(df[i])
                    ax.set_xlabel(i)
                    ax.set_ylabel('Frequency')
                    position += 1
                    print("histo")

                # showing scatter plot -- need x and y (2 vals)
                ax = self.ui.figure.add_subplot(position)
                x = np.array(df[col_num[0]])
                y = np.array(df[col_num[1]])
                # plot data
                ax.scatter(x, y)
                ax.set_xlabel(col_num[0])
                ax.set_ylabel(col_num[1])
                position += 1

            elif col_object != [] and not col_num:
                print("obj is not null")
                object_dv_csv()

        # create a spacing between subplots
        self.ui.figure.subplots_adjust(left=0.1,bottom=0.1, right=0.9, top=0.9, wspace=0.4, hspace=0.4)
        # refresh canvas
        self.ui.canvas.draw()

    def choose_file(self):
        file,check = QFileDialog.getOpenFileName(
            None,
            "Choose File",
            "",
            "CSV Files (*.csv);;Excel Worksheet (*.xlsx)"
        )
        if check:
            self.file_name_lbl.setText(file)
            print(file)

    def setupUi(self, SelectReport):
        SelectReport.setObjectName("SelectReport")
        SelectReport.resize(613, 499)
        self.centralwidget = QtWidgets.QWidget(SelectReport)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setMinimumSize(QtCore.QSize(0, 200))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.widget.setFont(font)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addWidget(self.widget, 0, QtCore.Qt.AlignVCenter)
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.widget_2.setFont(font)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.widget_4 = QtWidgets.QWidget(self.widget_2)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.name_lbl = QtWidgets.QLabel(self.widget_4)
        self.name_lbl.setObjectName("name_lbl")
        self.horizontalLayout.addWidget(self.name_lbl)
        self.report_name_text = QtWidgets.QLineEdit(self.widget_4)
        self.report_name_text.setObjectName("report_name_text")
        self.horizontalLayout.addWidget(self.report_name_text)
        self.verticalLayout_3.addWidget(self.widget_4, 0, QtCore.Qt.AlignLeft)
        self.widget_5 = QtWidgets.QWidget(self.widget_2)
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.choose_file_button = QtWidgets.QPushButton(self.widget_5)
        self.choose_file_button.setObjectName("choose_file_button")
        self.horizontalLayout_2.addWidget(self.choose_file_button)
        self.file_name_lbl = QtWidgets.QLabel(self.widget_5)
        self.file_name_lbl.setObjectName("file_name_lbl")
        self.horizontalLayout_2.addWidget(self.file_name_lbl)
        self.verticalLayout_3.addWidget(self.widget_5, 0, QtCore.Qt.AlignLeft)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_3.sizePolicy().hasHeightForWidth())
        self.widget_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.widget_3.setFont(font)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.generate_btn = QtWidgets.QPushButton(self.widget_3)
        self.generate_btn.setObjectName("generate_btn")
        self.horizontalLayout_3.addWidget(self.generate_btn)
        self.cancel_btn = QtWidgets.QPushButton(self.widget_3)
        self.cancel_btn.setObjectName("cancel_btn")
        self.horizontalLayout_3.addWidget(self.cancel_btn)
        self.verticalLayout.addWidget(self.widget_3, 0, QtCore.Qt.AlignHCenter)
        SelectReport.setCentralWidget(self.centralwidget)
        self.choose_file_button.clicked.connect(lambda: self.choose_file())
        self.generate_btn.clicked.connect(lambda :self.generate_report())
        self.generate_btn.clicked.connect(lambda :SelectReport.close())

        self.retranslateUi(SelectReport)
        QtCore.QMetaObject.connectSlotsByName(SelectReport)

    def retranslateUi(self, SelectReport):
        _translate = QtCore.QCoreApplication.translate
        SelectReport.setWindowTitle(_translate("SelectReport", "MainWindow"))
        self.label.setText(_translate("SelectReport", "Select Report "))
        self.name_lbl.setText(_translate("SelectReport", "Name"))
        self.choose_file_button.setText(_translate("SelectReport", "Choose File"))
        self.file_name_lbl.setText(_translate("SelectReport", "-filename-"))
        self.generate_btn.setText(_translate("SelectReport", "Generate"))
        self.cancel_btn.setText(_translate("SelectReport", "Cancel"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SelectReport = QtWidgets.QMainWindow()
    ui = Ui_SelectReport()
    ui.setupUi(SelectReport)
    SelectReport.show()
    sys.exit(app.exec_())
